pipeline:
  name: webserver-deployment
  identifier: webserverdeployment
  projectIdentifier: awsstackcreation
  orgIdentifier: default
  stages:
    - stage:
        name: Deploy to ECS
        identifier: Deploy_to_ECS
        type: Deployment
        spec:
          serviceConfig:
            serviceRef: ecs_sample_service
            serviceDefinition:
              type: ECS
              spec: {}
          infrastructure:
            environmentRef: dev
            infrastructureDefinition:
              type: ECS
              spec:
                connectorRef: aws_connector
                region: us-east-1               # your region
                cluster: my-ecs-cluster         # your cluster
          execution:
            steps:
              - step:
                  name: ECS Rolling Deploy
                  identifier: ECS_Rolling_Deploy
                  type: EcsRollingDeploy
                  spec: {}
              - step:
                  name: Verify ECS Service
                  identifier: Verify_ECS_Service
                  type: ShellScript
                  spec:
                    shell: Bash
                    // NOTE: This step runs on a Harness delegate that has aws cli + permissions (instance role or creds)
                    source:
                      type: Inline
                      spec:
                        script: |-
                          set -euo pipefail
                          REGION="us-east-1"
                          CLUSTER="my-ecs-cluster"
                          SERVICE="my-ecs-service"

                          echo "Looking up target group ARN for $SERVICE in cluster $CLUSTER..."
                          TG_ARN=$(aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --region "$REGION" --query 'services[0].loadBalancers[0].targetGroupArn' --output text || true)

                          if [ -n "$TG_ARN" ] && [ "$TG_ARN" != "None" ]; then
                            echo "Found target group: $TG_ARN"
                            LB_ARN=$(aws elbv2 describe-target-groups --target-group-arns "$TG_ARN" --region "$REGION" --query 'TargetGroups[0].LoadBalancerArns[0]' --output text)
                            DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns "$LB_ARN" --region "$REGION" --query 'LoadBalancers[0].DNSName' --output text)
                            echo "Load Balancer DNS: $DNS"
                            echo "Testing HTTP on http://$DNS ..."
                            if curl -s --max-time 10 "http://$DNS" | head -n 1; then
                              echo "✅ ECS service responded via ALB."
                              exit 0
                            else
                              echo "❌ ECS service did not respond via ALB."
                              exit 1
                            fi
                          else
                            echo "No ALB/TargetGroup associated. Trying to find Task public IP..."
                            TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER" --service-name "$SERVICE" --desired-status RUNNING --region "$REGION" --query 'taskArns[0]' --output text)
                            if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" == "None" ]; then
                              echo "No running task found for service."
                              exit 1
                            fi
                            ENI_ID=$(aws ecs describe-tasks --cluster "$CLUSTER" --tasks "$TASK_ARN" --region "$REGION" --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
                            if [ -z "$ENI_ID" ] || [ "$ENI_ID" == "None" ]; then
                              echo "No ENI found for task."
                              exit 1
                            fi
                            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "$ENI_ID" --region "$REGION" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
                            echo "Task public IP: $PUBLIC_IP"
                            echo "Testing HTTP on http://$PUBLIC_IP ..."
                            if curl -s --max-time 10 "http://$PUBLIC_IP" | head -n 1; then
                              echo "✅ ECS task responded via public IP."
                              exit 0
                            else
                              echo "❌ ECS task did not respond at public IP."
                              exit 1
                            fi
                          fi
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
